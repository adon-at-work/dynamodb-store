{"version":3,"sources":["../lib/DynamoDBStore.js"],"names":["DynamoDBStore","constructor","options","callback","tableName","table","name","hashPrefix","hashKey","readCapacityUnits","Number","writeCapacityUnits","touchInterval","ttl","keepExpired","dynamoConfig","apiVersion","dynamoService","DynamoDB","documentClient","DocumentClient","service","describeTable","TableName","promise","then","catch","createTable","params","KeySchema","AttributeName","KeyType","AttributeDefinitions","AttributeType","ProvisionedThroughput","ReadCapacityUnits","WriteCapacityUnits","err","set","sid","sess","sessionId","getSessionId","expires","getExpirationDate","Item","updated","Date","now","put","get","Key","ConsistentRead","result","destroy","delete","touch","UpdateExpression","ExpressionAttributeNames","ExpressionAttributeValues","ReturnValues","update","expirationDate","cookie","isInteger","maxAge","add","toDate"],"mappings":"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","file":"DynamoDBStore.js","sourcesContent":["import { Store } from 'express-session';\nimport AWS from 'aws-sdk';\nimport moment from 'moment';\nimport {\n  DEFAULT_TABLE_NAME,\n  DEFAULT_RCU,\n  DEFAULT_WCU,\n  DEFAULT_CALLBACK,\n  DEFAULT_HASH_KEY,\n  DEFAULT_HASH_PREFIX,\n  DEFAULT_TTL,\n  DEFAULT_TOUCH_INTERVAL,\n  DEFAULT_KEEP_EXPIRED_POLICY,\n  API_VERSION,\n} from './constants';\nimport { toSecondsEpoch, debug } from './util';\n\n/**\n * Express.js session store fro DynamoDB.\n */\nexport default class DynamoDBStore extends Store {\n  /**\n   * Constructor.\n   * @param  {Object} options                Store options.\n   * @param  {Function} callback Optional callback for table creation.\n   */\n  constructor(options = {}, callback = DEFAULT_CALLBACK) {\n    super();\n    debug('Initializing store', options);\n\n    // table properties\n    this.tableName = options.table && options.table.name ? options.table.name : DEFAULT_TABLE_NAME;\n    this.hashPrefix =\n      options.table && options.table.hashPrefix ? options.table.hashPrefix : DEFAULT_HASH_PREFIX;\n    this.hashKey =\n      options.table && options.table.hashKey ? options.table.hashKey : DEFAULT_HASH_KEY;\n    this.readCapacityUnits =\n      options.table && options.table.readCapacityUnits\n        ? Number(options.table.readCapacityUnits)\n        : DEFAULT_RCU;\n    this.writeCapacityUnits =\n      options.table && options.table.writeCapacityUnits\n        ? Number(options.table.writeCapacityUnits)\n        : DEFAULT_WCU;\n    this.touchInterval =\n      options.touchInterval >= 0 ? options.touchInterval : DEFAULT_TOUCH_INTERVAL;\n\n    // time to live\n    this.ttl = options.ttl ? options.ttl : DEFAULT_TTL;\n\n    // housekeeping\n    this.keepExpired = options.keepExpired\n      ? options.keepExpired\n      : DEFAULT_KEEP_EXPIRED_POLICY;\n\n    // dynamodb client configuration\n    let dynamoConfig = options.dynamoConfig ? options.dynamoConfig : {};\n    dynamoConfig = {\n      ...dynamoConfig,\n      apiVersion: API_VERSION,\n    };\n    this.dynamoService = new AWS.DynamoDB(dynamoConfig);\n    this.documentClient = new AWS.DynamoDB.DocumentClient({\n      service: this.dynamoService,\n    });\n\n    // creates the table if necessary\n    this.dynamoService\n      .describeTable({\n        TableName: this.tableName,\n      })\n      .promise()\n      .then(() => {\n        debug(`Table ${this.tableName} already exists.`, options);\n        callback();\n      })\n      .catch(() => this.createTable(callback));\n  }\n\n  /**\n   * Creates the session table.\n   * @param  {Function} callback Callback to be invoked at the wnd of the execution.\n   */\n  async createTable(callback) {\n    try {\n      const params = {\n        TableName: this.tableName,\n        KeySchema: [{ AttributeName: this.hashKey, KeyType: 'HASH' }],\n        AttributeDefinitions: [{ AttributeName: this.hashKey, AttributeType: 'S' }],\n        ProvisionedThroughput: {\n          ReadCapacityUnits: this.readCapacityUnits,\n          WriteCapacityUnits: this.writeCapacityUnits,\n        },\n      };\n      await this.dynamoService.createTable(params).promise();\n      debug(`Table ${this.tableName} created`, params);\n      callback();\n    } catch (err) {\n      debug(`Error creating table ${this.tableName}`, err);\n      callback(err);\n    }\n  }\n\n  /**\n   * Stores a session.\n   * @param  {String}   sid      Session ID.\n   * @param  {Object}   sess     The session object.\n   * @param  {Function} callback Callback to be invoked at the wnd of the execution.\n   */\n  async set(sid, sess, callback) {\n    try {\n      const sessionId = this.getSessionId(sid);\n      const expires = this.getExpirationDate(sess);\n      const params = {\n        TableName: this.tableName,\n        Item: {\n          [this.hashKey]: sessionId,\n          expires: toSecondsEpoch(expires),\n          sess: {\n            ...sess,\n            updated: Date.now(),\n          },\n        },\n      };\n      debug(`Saving session '${sid}'`, sess);\n      this.documentClient.put(params, callback);\n    } catch (err) {\n      debug('Error saving session', {\n        sid,\n        sess,\n        err,\n      });\n      callback(err);\n    }\n  }\n\n  /**\n   * Retrieves a session from dynamo.\n   * @param  {String}   sid      Session ID.\n   * @param  {Function} callback Callback to be invoked at the wnd of the execution.\n   */\n  async get(sid, callback) {\n    try {\n      const sessionId = this.getSessionId(sid);\n      const params = {\n        TableName: this.tableName,\n        Key: {\n          [this.hashKey]: sessionId,\n        },\n        ConsistentRead: true,\n      };\n      const result = await this.documentClient.get(params).promise();\n\n      if (!result || !result.Item) {\n        debug(`Session '${sid}' not found`);\n        callback(null, null);\n      } else if (!result.Item.expires || result.Item.expires <= toSecondsEpoch(new Date())) {\n        debug(`Found session '${sid}' but it is expired`);\n        if (this.keepExpired) {\n          callback(null, null);\n        } else {\n          this.destroy(sid, callback);\n        }\n      } else {\n        debug(`Session '${sid}' found`, result.Item.sess);\n        callback(null, result.Item.sess);\n      }\n    } catch (err) {\n      debug(`Error getting session '${sid}'`, err);\n      callback(err);\n    }\n  }\n\n  /**\n   * Deletes a session from dynamo.\n   * @param  {String}   sid      Session ID.\n   * @param  {Function} callback Callback to be invoked at the wnd of the execution.\n   */\n  async destroy(sid, callback) {\n    try {\n      const sessionId = this.getSessionId(sid);\n      const params = {\n        TableName: this.tableName,\n        Key: {\n          [this.hashKey]: sessionId,\n        },\n      };\n      await this.documentClient.delete(params).promise();\n      debug(`Destroyed session '${sid}'`);\n      callback(null, null);\n    } catch (err) {\n      debug(`Error destroying session '${sid}'`, err);\n      callback(err);\n    }\n  }\n\n  /**\n   * Updates the expiration time of an existing session.\n   * @param  {String}   sid      Session ID.\n   * @param  {Object}   sess     The session object.\n   * @param  {Function} callback Callback to be invoked at the wnd of the execution.\n   */\n  async touch(sid, sess, callback) {\n    try {\n      if (!sess.updated || Number(sess.updated) + this.touchInterval <= Date.now()) {\n        const sessionId = this.getSessionId(sid);\n        const expires = this.getExpirationDate(sess);\n        const params = {\n          TableName: this.tableName,\n          Key: {\n            [this.hashKey]: sessionId,\n          },\n          UpdateExpression: 'set expires = :e, sess.#up = :n',\n          ExpressionAttributeNames: {\n            '#up': 'updated',\n          },\n          ExpressionAttributeValues: {\n            ':e': toSecondsEpoch(expires),\n            ':n': Date.now(),\n          },\n          ReturnValues: 'UPDATED_NEW',\n        };\n        debug(`Touching session '${sid}'`);\n        this.documentClient.update(params, callback);\n      } else {\n        debug(`Skipping touch of session '${sid}'`);\n        callback(null);\n      }\n    } catch (err) {\n      debug(`Error touching session '${sid}'`, err);\n      callback(err);\n    }\n  }\n\n  /**\n   * Builds the session ID foe storage.\n   * @param  {String} sid Original session id.\n   * @return {String}     Prefix + original session id.\n   */\n  getSessionId(sid) {\n    return `${this.hashPrefix}${sid}`;\n  }\n\n  /**\n   * Calculates the session expiration date.\n   * @param  {Object} sess The session object.\n   * @return {Date}      the session expiration date.\n   */\n  getExpirationDate(sess) {\n    let expirationDate = moment();\n    if (sess.cookie && Number.isInteger(sess.cookie.maxAge)) {\n      expirationDate = expirationDate.add(sess.cookie.maxAge, 'ms');\n    } else {\n      expirationDate = expirationDate.add(this.ttl, 'ms');\n    }\n    return expirationDate.toDate();\n  }\n}\n"]}